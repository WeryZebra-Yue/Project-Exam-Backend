"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _authentication = _interopRequireDefault(require("./authentication.service"));

var _AdminModel = _interopRequireDefault(require("../../models/AdminModel"));

var _ExaminerModel = _interopRequireDefault(require("../../models/ExaminerModel"));

var _UniversityModel = _interopRequireDefault(require("../../models/UniversityModel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class AdminService {
  async signIn(email, password) {
    const user = await _AdminModel.default.findOne({
      email
    });

    if (!user) {
      return {
        status: 400,
        message: "Admin not found"
      };
    }

    const isPasswordMatch = password === user.password;

    if (!isPasswordMatch) {
      return {
        status: 400,
        message: "Incorrect password"
      };
    }

    console.log(user);

    if (user.email === "admin@ppsu.db" || user.email === "developer@ppsu.db") {
      return {
        status: 200,
        message: "Login successful",
        token: _authentication.default.generateToken(user.id, user.role, true)
      };
    } else {
      return {
        status: 200,
        message: "Login successful",
        token: _authentication.default.generateToken(user.id, user.role, false)
      };
    }
  }

  async addExaminer(user) {
    if (user.e_id === "SOE") {
      let count = await _ExaminerModel.default.countDocuments({
        e_id: "SOE"
      });
      count++;

      if (count < 10) {
        user["eid"] = `SOE000${count}`;
      } else if (count < 100) {
        user["eid"] = `SOE00${count}`;
      } else if (count < 1000) {
        user["eid"] = `SOE0${count}`;
      }
    } else if (user.e_id === "SOP") {
      let count = await _ExaminerModel.default.countDocuments({
        e_id: "SOP"
      });
      count++;

      if (count < 10) {
        user["eid"] = `SOP000${count}`;
      } else if (count < 100) {
        user["eid"] = `SOP00${count}`;
      } else if (count < 1000) {
        user["eid"] = `SOP0${count}`;
      }
    } else if (user.e_id === "SON") {
      let count = await _ExaminerModel.default.countDocuments({
        e_id: "SON"
      });
      count++;

      if (count < 10) {
        user["eid"] = `SON000${count}`;
      } else if (count < 100) {
        user["eid"] = `SON00${count}`;
      } else if (count < 1000) {
        user["eid"] = `SON0${count}`;
      }
    } else if (user.e_id === "SLM") {
      let count = await _ExaminerModel.default.countDocuments({
        e_id: "SLM"
      });
      count++;

      if (count < 10) {
        user["eid"] = `SLM000${count}`;
      } else if (count < 100) {
        user["eid"] = `SLM00${count}`;
      } else if (count < 1000) {
        user["eid"] = `SLM0${count}`;
      }
    }

    return _ExaminerModel.default.create(user);
  }

  async getExaminers(limit) {
    return _ExaminerModel.default.find().limit(limit);
  }

  async getExaminersUsingId(id) {
    return _ExaminerModel.default.findById(id);
  }

  async getExaminersUsingName(name) {
    // index search
    return _ExaminerModel.default.find({
      name
    });
  }

  async getExaminersUsingEmail(email) {
    return _ExaminerModel.default.find({
      email
    });
  }

  async getExaminersUsingMobile(mobile) {
    return _ExaminerModel.default.find({
      mobile
    });
  }

  async getAllExaminers() {
    return _ExaminerModel.default.find();
  } // Super Admin


  async addAdmin(user) {
    const email = user.email;
    const user_Exist = await _AdminModel.default.findOne({
      email
    });

    if (user_Exist) {
      return {
        status: 400,
        message: "Admin already exists"
      };
    }

    const admin = await _AdminModel.default.create({
      email: user.email,
      password: user.password,
      role: user.role,
      passwordLength: user.password.length
    });
    return {
      status: 200,
      message: "Admin added successfully"
    };
  }

  async updateAdmin(user) {
    const email = user.email;
    console.log(user);
    const admin = await _AdminModel.default.findOne({
      email
    });

    if (!admin) {
      return {
        status: 400,
        message: "Admin not found"
      };
    }

    const updatedAdmin = await _AdminModel.default.findByIdAndUpdate(admin._id, {
      password: user.password,
      passwordLength: user.password.length,
      role: user.role
    });
    return updatedAdmin;
  }

  async getAdmins() {
    const admins = await _AdminModel.default.find();
    admins.forEach((admin, index) => {
      if (admin.email === "developer@ppsu.db") {
        admins.splice(index, 1);
      }
    });
    return admins;
  }

  async getPassword(email) {
    const admin = await _AdminModel.default.findOne({
      email
    });

    if (!admin) {
      return {
        status: 400,
        message: "Admin not found"
      };
    }

    return admin.password;
  }

  async updateExaminer(user) {
    return _ExaminerModel.default.findByIdAndUpdate(user._id, user);
  }

  async addMultipleUsers(users) {
    const response = [];
    users.forEach(async user => {
      const resposne = await this.addExaminer(user);
      response.push(resposne);
    });
    return response;
  }

  async addUniversity(university) {
    return _UniversityModel.default.create(university);
  }

  async getUniversities() {
    return _UniversityModel.default.find();
  }

  async updateUniversity(university) {
    return _UniversityModel.default.findByIdAndUpdate(university._id, university);
  }

  async getDistance(name) {
    return _UniversityModel.default.findOne({
      name
    });
  }

}

var _default = new AdminService();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBZG1pblNlcnZpY2UiLCJzaWduSW4iLCJlbWFpbCIsInBhc3N3b3JkIiwidXNlciIsIkFkbWluIiwiZmluZE9uZSIsInN0YXR1cyIsIm1lc3NhZ2UiLCJpc1Bhc3N3b3JkTWF0Y2giLCJjb25zb2xlIiwibG9nIiwidG9rZW4iLCJBdXRoZW50aWNhdGlvblNlcnZpY2UiLCJnZW5lcmF0ZVRva2VuIiwiaWQiLCJyb2xlIiwiYWRkRXhhbWluZXIiLCJlX2lkIiwiY291bnQiLCJFeGFtaW5lciIsImNvdW50RG9jdW1lbnRzIiwiY3JlYXRlIiwiZ2V0RXhhbWluZXJzIiwibGltaXQiLCJmaW5kIiwiZ2V0RXhhbWluZXJzVXNpbmdJZCIsImZpbmRCeUlkIiwiZ2V0RXhhbWluZXJzVXNpbmdOYW1lIiwibmFtZSIsImdldEV4YW1pbmVyc1VzaW5nRW1haWwiLCJnZXRFeGFtaW5lcnNVc2luZ01vYmlsZSIsIm1vYmlsZSIsImdldEFsbEV4YW1pbmVycyIsImFkZEFkbWluIiwidXNlcl9FeGlzdCIsImFkbWluIiwicGFzc3dvcmRMZW5ndGgiLCJsZW5ndGgiLCJ1cGRhdGVBZG1pbiIsInVwZGF0ZWRBZG1pbiIsImZpbmRCeUlkQW5kVXBkYXRlIiwiX2lkIiwiZ2V0QWRtaW5zIiwiYWRtaW5zIiwiZm9yRWFjaCIsImluZGV4Iiwic3BsaWNlIiwiZ2V0UGFzc3dvcmQiLCJ1cGRhdGVFeGFtaW5lciIsImFkZE11bHRpcGxlVXNlcnMiLCJ1c2VycyIsInJlc3BvbnNlIiwicmVzcG9zbmUiLCJwdXNoIiwiYWRkVW5pdmVyc2l0eSIsInVuaXZlcnNpdHkiLCJVbml2ZXJzaXR5TW9kZWwiLCJnZXRVbml2ZXJzaXRpZXMiLCJ1cGRhdGVVbml2ZXJzaXR5IiwiZ2V0RGlzdGFuY2UiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zZXJ2ZXIvYXBpL3NlcnZpY2VzL2FkbWluLnNlcnZpY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEF1dGhlbnRpY2F0aW9uU2VydmljZSBmcm9tIFwiLi9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlXCI7XHJcbmltcG9ydCBBZG1pbiBmcm9tIFwiLi4vLi4vbW9kZWxzL0FkbWluTW9kZWxcIjtcclxuaW1wb3J0IEV4YW1pbmVyIGZyb20gXCIuLi8uLi9tb2RlbHMvRXhhbWluZXJNb2RlbFwiO1xyXG5pbXBvcnQgVW5pdmVyc2l0eU1vZGVsIGZyb20gXCIuLi8uLi9tb2RlbHMvVW5pdmVyc2l0eU1vZGVsXCI7XHJcbmNsYXNzIEFkbWluU2VydmljZSB7XHJcbiAgYXN5bmMgc2lnbkluKGVtYWlsLCBwYXNzd29yZCkge1xyXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IEFkbWluLmZpbmRPbmUoeyBlbWFpbCB9KTtcclxuICAgIGlmICghdXNlcikge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXR1czogNDAwLFxyXG4gICAgICAgIG1lc3NhZ2U6IFwiQWRtaW4gbm90IGZvdW5kXCIsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjb25zdCBpc1Bhc3N3b3JkTWF0Y2ggPSBwYXNzd29yZCA9PT0gdXNlci5wYXNzd29yZDtcclxuXHJcbiAgICBpZiAoIWlzUGFzc3dvcmRNYXRjaCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXR1czogNDAwLFxyXG4gICAgICAgIG1lc3NhZ2U6IFwiSW5jb3JyZWN0IHBhc3N3b3JkXCIsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZyh1c2VyKTtcclxuICAgIGlmICh1c2VyLmVtYWlsID09PSBcImFkbWluQHBwc3UuZGJcIiB8fCB1c2VyLmVtYWlsID09PSBcImRldmVsb3BlckBwcHN1LmRiXCIpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdGF0dXM6IDIwMCxcclxuICAgICAgICBtZXNzYWdlOiBcIkxvZ2luIHN1Y2Nlc3NmdWxcIixcclxuICAgICAgICB0b2tlbjogQXV0aGVudGljYXRpb25TZXJ2aWNlLmdlbmVyYXRlVG9rZW4odXNlci5pZCwgdXNlci5yb2xlLCB0cnVlKSxcclxuICAgICAgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzOiAyMDAsXHJcbiAgICAgICAgbWVzc2FnZTogXCJMb2dpbiBzdWNjZXNzZnVsXCIsXHJcbiAgICAgICAgdG9rZW46IEF1dGhlbnRpY2F0aW9uU2VydmljZS5nZW5lcmF0ZVRva2VuKHVzZXIuaWQsIHVzZXIucm9sZSwgZmFsc2UpLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxuICBhc3luYyBhZGRFeGFtaW5lcih1c2VyKSB7XHJcbiAgICBpZiAodXNlci5lX2lkID09PSBcIlNPRVwiKSB7XHJcbiAgICAgIGxldCBjb3VudCA9IGF3YWl0IEV4YW1pbmVyLmNvdW50RG9jdW1lbnRzKHsgZV9pZDogXCJTT0VcIiB9KTtcclxuICAgICAgY291bnQrKztcclxuICAgICAgaWYgKGNvdW50IDwgMTApIHtcclxuICAgICAgICB1c2VyW1wiZWlkXCJdID0gYFNPRTAwMCR7Y291bnR9YDtcclxuICAgICAgfSBlbHNlIGlmIChjb3VudCA8IDEwMCkge1xyXG4gICAgICAgIHVzZXJbXCJlaWRcIl0gPSBgU09FMDAke2NvdW50fWA7XHJcbiAgICAgIH0gZWxzZSBpZiAoY291bnQgPCAxMDAwKSB7XHJcbiAgICAgICAgdXNlcltcImVpZFwiXSA9IGBTT0UwJHtjb3VudH1gO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHVzZXIuZV9pZCA9PT0gXCJTT1BcIikge1xyXG4gICAgICBsZXQgY291bnQgPSBhd2FpdCBFeGFtaW5lci5jb3VudERvY3VtZW50cyh7IGVfaWQ6IFwiU09QXCIgfSk7XHJcbiAgICAgIGNvdW50Kys7XHJcblxyXG4gICAgICBpZiAoY291bnQgPCAxMCkge1xyXG4gICAgICAgIHVzZXJbXCJlaWRcIl0gPSBgU09QMDAwJHtjb3VudH1gO1xyXG4gICAgICB9IGVsc2UgaWYgKGNvdW50IDwgMTAwKSB7XHJcbiAgICAgICAgdXNlcltcImVpZFwiXSA9IGBTT1AwMCR7Y291bnR9YDtcclxuICAgICAgfSBlbHNlIGlmIChjb3VudCA8IDEwMDApIHtcclxuICAgICAgICB1c2VyW1wiZWlkXCJdID0gYFNPUDAke2NvdW50fWA7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodXNlci5lX2lkID09PSBcIlNPTlwiKSB7XHJcbiAgICAgIGxldCBjb3VudCA9IGF3YWl0IEV4YW1pbmVyLmNvdW50RG9jdW1lbnRzKHsgZV9pZDogXCJTT05cIiB9KTtcclxuICAgICAgY291bnQrKztcclxuXHJcbiAgICAgIGlmIChjb3VudCA8IDEwKSB7XHJcbiAgICAgICAgdXNlcltcImVpZFwiXSA9IGBTT04wMDAke2NvdW50fWA7XHJcbiAgICAgIH0gZWxzZSBpZiAoY291bnQgPCAxMDApIHtcclxuICAgICAgICB1c2VyW1wiZWlkXCJdID0gYFNPTjAwJHtjb3VudH1gO1xyXG4gICAgICB9IGVsc2UgaWYgKGNvdW50IDwgMTAwMCkge1xyXG4gICAgICAgIHVzZXJbXCJlaWRcIl0gPSBgU09OMCR7Y291bnR9YDtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh1c2VyLmVfaWQgPT09IFwiU0xNXCIpIHtcclxuICAgICAgbGV0IGNvdW50ID0gYXdhaXQgRXhhbWluZXIuY291bnREb2N1bWVudHMoeyBlX2lkOiBcIlNMTVwiIH0pO1xyXG4gICAgICBjb3VudCsrO1xyXG5cclxuICAgICAgaWYgKGNvdW50IDwgMTApIHtcclxuICAgICAgICB1c2VyW1wiZWlkXCJdID0gYFNMTTAwMCR7Y291bnR9YDtcclxuICAgICAgfSBlbHNlIGlmIChjb3VudCA8IDEwMCkge1xyXG4gICAgICAgIHVzZXJbXCJlaWRcIl0gPSBgU0xNMDAke2NvdW50fWA7XHJcbiAgICAgIH0gZWxzZSBpZiAoY291bnQgPCAxMDAwKSB7XHJcbiAgICAgICAgdXNlcltcImVpZFwiXSA9IGBTTE0wJHtjb3VudH1gO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIEV4YW1pbmVyLmNyZWF0ZSh1c2VyKTtcclxuICB9XHJcbiAgYXN5bmMgZ2V0RXhhbWluZXJzKGxpbWl0KSB7XHJcbiAgICByZXR1cm4gRXhhbWluZXIuZmluZCgpLmxpbWl0KGxpbWl0KTtcclxuICB9XHJcbiAgYXN5bmMgZ2V0RXhhbWluZXJzVXNpbmdJZChpZCkge1xyXG4gICAgcmV0dXJuIEV4YW1pbmVyLmZpbmRCeUlkKGlkKTtcclxuICB9XHJcbiAgYXN5bmMgZ2V0RXhhbWluZXJzVXNpbmdOYW1lKG5hbWUpIHtcclxuICAgIC8vIGluZGV4IHNlYXJjaFxyXG5cclxuICAgIHJldHVybiBFeGFtaW5lci5maW5kKHsgbmFtZSB9KTtcclxuICB9XHJcbiAgYXN5bmMgZ2V0RXhhbWluZXJzVXNpbmdFbWFpbChlbWFpbCkge1xyXG4gICAgcmV0dXJuIEV4YW1pbmVyLmZpbmQoeyBlbWFpbCB9KTtcclxuICB9XHJcbiAgYXN5bmMgZ2V0RXhhbWluZXJzVXNpbmdNb2JpbGUobW9iaWxlKSB7XHJcbiAgICByZXR1cm4gRXhhbWluZXIuZmluZCh7IG1vYmlsZSB9KTtcclxuICB9XHJcbiAgYXN5bmMgZ2V0QWxsRXhhbWluZXJzKCkge1xyXG4gICAgcmV0dXJuIEV4YW1pbmVyLmZpbmQoKTtcclxuICB9XHJcblxyXG4gIC8vIFN1cGVyIEFkbWluXHJcbiAgYXN5bmMgYWRkQWRtaW4odXNlcikge1xyXG4gICAgY29uc3QgZW1haWwgPSB1c2VyLmVtYWlsO1xyXG4gICAgY29uc3QgdXNlcl9FeGlzdCA9IGF3YWl0IEFkbWluLmZpbmRPbmUoeyBlbWFpbCB9KTtcclxuICAgIGlmICh1c2VyX0V4aXN0KSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzOiA0MDAsXHJcbiAgICAgICAgbWVzc2FnZTogXCJBZG1pbiBhbHJlYWR5IGV4aXN0c1wiLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgY29uc3QgYWRtaW4gPSBhd2FpdCBBZG1pbi5jcmVhdGUoe1xyXG4gICAgICBlbWFpbDogdXNlci5lbWFpbCxcclxuICAgICAgcGFzc3dvcmQ6IHVzZXIucGFzc3dvcmQsXHJcbiAgICAgIHJvbGU6IHVzZXIucm9sZSxcclxuICAgICAgcGFzc3dvcmRMZW5ndGg6IHVzZXIucGFzc3dvcmQubGVuZ3RoLFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3RhdHVzOiAyMDAsXHJcbiAgICAgIG1lc3NhZ2U6IFwiQWRtaW4gYWRkZWQgc3VjY2Vzc2Z1bGx5XCIsXHJcbiAgICB9O1xyXG4gIH1cclxuICBhc3luYyB1cGRhdGVBZG1pbih1c2VyKSB7XHJcbiAgICBjb25zdCBlbWFpbCA9IHVzZXIuZW1haWw7XHJcbiAgICBjb25zb2xlLmxvZyh1c2VyKTtcclxuICAgIGNvbnN0IGFkbWluID0gYXdhaXQgQWRtaW4uZmluZE9uZSh7IGVtYWlsIH0pO1xyXG4gICAgaWYgKCFhZG1pbikge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXR1czogNDAwLFxyXG4gICAgICAgIG1lc3NhZ2U6IFwiQWRtaW4gbm90IGZvdW5kXCIsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdXBkYXRlZEFkbWluID0gYXdhaXQgQWRtaW4uZmluZEJ5SWRBbmRVcGRhdGUoYWRtaW4uX2lkLCB7XHJcbiAgICAgIHBhc3N3b3JkOiB1c2VyLnBhc3N3b3JkLFxyXG4gICAgICBwYXNzd29yZExlbmd0aDogdXNlci5wYXNzd29yZC5sZW5ndGgsXHJcbiAgICAgIHJvbGU6IHVzZXIucm9sZSxcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHVwZGF0ZWRBZG1pbjtcclxuICB9XHJcbiAgYXN5bmMgZ2V0QWRtaW5zKCkge1xyXG4gICAgY29uc3QgYWRtaW5zID0gYXdhaXQgQWRtaW4uZmluZCgpO1xyXG5cclxuICAgIGFkbWlucy5mb3JFYWNoKChhZG1pbiwgaW5kZXgpID0+IHtcclxuICAgICAgaWYgKGFkbWluLmVtYWlsID09PSBcImRldmVsb3BlckBwcHN1LmRiXCIpIHtcclxuICAgICAgICBhZG1pbnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gYWRtaW5zO1xyXG4gIH1cclxuICBhc3luYyBnZXRQYXNzd29yZChlbWFpbCkge1xyXG4gICAgY29uc3QgYWRtaW4gPSBhd2FpdCBBZG1pbi5maW5kT25lKHsgZW1haWwgfSk7XHJcbiAgICBpZiAoIWFkbWluKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzOiA0MDAsXHJcbiAgICAgICAgbWVzc2FnZTogXCJBZG1pbiBub3QgZm91bmRcIixcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBhZG1pbi5wYXNzd29yZDtcclxuICB9XHJcblxyXG4gIGFzeW5jIHVwZGF0ZUV4YW1pbmVyKHVzZXIpIHtcclxuICAgIHJldHVybiBFeGFtaW5lci5maW5kQnlJZEFuZFVwZGF0ZSh1c2VyLl9pZCwgdXNlcik7XHJcbiAgfVxyXG4gIGFzeW5jIGFkZE11bHRpcGxlVXNlcnModXNlcnMpIHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gW107XHJcbiAgICB1c2Vycy5mb3JFYWNoKGFzeW5jICh1c2VyKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlc3Bvc25lID0gYXdhaXQgdGhpcy5hZGRFeGFtaW5lcih1c2VyKTtcclxuICAgICAgcmVzcG9uc2UucHVzaChyZXNwb3NuZSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXNwb25zZTtcclxuICB9XHJcbiAgYXN5bmMgYWRkVW5pdmVyc2l0eSh1bml2ZXJzaXR5KSB7XHJcbiAgICByZXR1cm4gVW5pdmVyc2l0eU1vZGVsLmNyZWF0ZSh1bml2ZXJzaXR5KTtcclxuICB9XHJcbiAgYXN5bmMgZ2V0VW5pdmVyc2l0aWVzKCkge1xyXG4gICAgcmV0dXJuIFVuaXZlcnNpdHlNb2RlbC5maW5kKCk7XHJcbiAgfVxyXG4gIGFzeW5jIHVwZGF0ZVVuaXZlcnNpdHkodW5pdmVyc2l0eSkge1xyXG4gICAgcmV0dXJuIFVuaXZlcnNpdHlNb2RlbC5maW5kQnlJZEFuZFVwZGF0ZSh1bml2ZXJzaXR5Ll9pZCwgdW5pdmVyc2l0eSk7XHJcbiAgfVxyXG4gIGFzeW5jIGdldERpc3RhbmNlKG5hbWUpIHtcclxuICAgIHJldHVybiBVbml2ZXJzaXR5TW9kZWwuZmluZE9uZSh7IG5hbWUgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgQWRtaW5TZXJ2aWNlKCk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0EsTUFBTUEsWUFBTixDQUFtQjtFQUNMLE1BQU5DLE1BQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLEVBQWtCO0lBQzVCLE1BQU1DLElBQUksR0FBRyxNQUFNQyxtQkFBQSxDQUFNQyxPQUFOLENBQWM7TUFBRUo7SUFBRixDQUFkLENBQW5COztJQUNBLElBQUksQ0FBQ0UsSUFBTCxFQUFXO01BQ1QsT0FBTztRQUNMRyxNQUFNLEVBQUUsR0FESDtRQUVMQyxPQUFPLEVBQUU7TUFGSixDQUFQO0lBSUQ7O0lBQ0QsTUFBTUMsZUFBZSxHQUFHTixRQUFRLEtBQUtDLElBQUksQ0FBQ0QsUUFBMUM7O0lBRUEsSUFBSSxDQUFDTSxlQUFMLEVBQXNCO01BQ3BCLE9BQU87UUFDTEYsTUFBTSxFQUFFLEdBREg7UUFFTEMsT0FBTyxFQUFFO01BRkosQ0FBUDtJQUlEOztJQUNERSxPQUFPLENBQUNDLEdBQVIsQ0FBWVAsSUFBWjs7SUFDQSxJQUFJQSxJQUFJLENBQUNGLEtBQUwsS0FBZSxlQUFmLElBQWtDRSxJQUFJLENBQUNGLEtBQUwsS0FBZSxtQkFBckQsRUFBMEU7TUFDeEUsT0FBTztRQUNMSyxNQUFNLEVBQUUsR0FESDtRQUVMQyxPQUFPLEVBQUUsa0JBRko7UUFHTEksS0FBSyxFQUFFQyx1QkFBQSxDQUFzQkMsYUFBdEIsQ0FBb0NWLElBQUksQ0FBQ1csRUFBekMsRUFBNkNYLElBQUksQ0FBQ1ksSUFBbEQsRUFBd0QsSUFBeEQ7TUFIRixDQUFQO0lBS0QsQ0FORCxN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