"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _authentication = _interopRequireDefault(require("./authentication.service"));
var _AdminModel = _interopRequireDefault(require("../../models/AdminModel"));
var _ExaminerModel = _interopRequireDefault(require("../../models/ExaminerModel"));
var _UniversityModel = _interopRequireDefault(require("../../models/UniversityModel"));
var _MetaDeta = _interopRequireDefault(require("../../models/MetaDeta"));
var _AssignModel = _interopRequireDefault(require("../../models/AssignModel"));
var _express = _interopRequireDefault(require("express"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class AdminService {
  async signIn(email, password) {
    const user = await _AdminModel.default.findOne({
      email
    });
    if (!user) {
      return {
        status: 400,
        message: "Admin not found"
      };
    }
    const isPasswordMatch = password === user.password;
    if (!isPasswordMatch) {
      return {
        status: 400,
        message: "Incorrect password"
      };
    }
    console.log(user);
    if (user.email === "coe@ppsu.ac.in" || user.email === "developer@ppsu.db") {
      return {
        status: 200,
        message: "Login successful",
        token: _authentication.default.generateToken(user.id, user.role, true)
      };
    } else {
      return {
        status: 200,
        message: "Login successful",
        token: _authentication.default.generateToken(user.id, user.role, false)
      };
    }
  }
  async updateMetaData() {
    const metaData = await _MetaDeta.default.findOne({
      unique: "metaData"
    });
    if (!metaData) {
      return _MetaDeta.default.create({
        unique: "metaData",
        lastUpdated: new Date()
      });
    } else {
      // update
      return _MetaDeta.default.findByIdAndUpdate(metaData._id, {
        lastUpdated: new Date()
      });
    }
  }
  async addExaminer(user) {
    console.log(user);
    if ((user === null || user === void 0 ? void 0 : user.e_id) === "SOE") {
      // let count = await Examiner.countDocuments({ e_id: "SOE" });
      // get the last examiner
      let lastExaminer = await _ExaminerModel.default.findOne({
        e_id: "SOE"
      }).sort({
        _id: -1
      });
      let count = 1;
      if (lastExaminer) {
        count = parseInt(lastExaminer.eid.split("SOE")[1]) + 1;
      }
      count++;
      if (count < 10) {
        user["eid"] = `SOE000${count}`;
      } else if (count < 100) {
        user["eid"] = `SOE00${count}`;
      } else if (count < 1000) {
        user["eid"] = `SOE0${count}`;
      }
    } else if (user.e_id === "SOP") {
      let count = await _ExaminerModel.default.countDocuments({
        e_id: "SOP"
      });
      count++;
      if (count < 10) {
        user["eid"] = `SOP000${count}`;
      } else if (count < 100) {
        user["eid"] = `SOP00${count}`;
      } else if (count < 1000) {
        user["eid"] = `SOP0${count}`;
      }
    } else if (user.e_id === "SON") {
      let count = await _ExaminerModel.default.countDocuments({
        e_id: "SON"
      });
      count++;
      if (count < 10) {
        user["eid"] = `SON000${count}`;
      } else if (count < 100) {
        user["eid"] = `SON00${count}`;
      } else if (count < 1000) {
        user["eid"] = `SON0${count}`;
      }
    } else if (user.e_id === "SLM") {
      let count = await _ExaminerModel.default.countDocuments({
        e_id: "SLM"
      });
      count++;
      if (count < 10) {
        user["eid"] = `SLM000${count}`;
      } else if (count < 100) {
        user["eid"] = `SLM00${count}`;
      } else if (count < 1000) {
        user["eid"] = `SLM0${count}`;
      }
    } else {
      let count = await _ExaminerModel.default.countDocuments({
        e_id: "SOE"
      });
      count++;
      if (count < 10) {
        user["eid"] = `SOE000${count}`;
      } else if (count < 100) {
        user["eid"] = `SOE00${count}`;
      } else if (count < 1000) {
        user["eid"] = `SOE0${count}`;
      }
    }
    return _ExaminerModel.default.create(user);
  }
  async deleteExaminer(id) {
    return _ExaminerModel.default.findByIdAndDelete(id);
  }
  async getExaminers(limit) {
    return _ExaminerModel.default.find().limit(limit);
  }
  async getExaminersUsingId(id) {
    return _ExaminerModel.default.findById(id);
  }
  async getExaminersUsingName(name) {
    // index search

    return _ExaminerModel.default.find({
      name
    });
  }
  async getExaminersUsingEmail(email) {
    return _ExaminerModel.default.find({
      email
    });
  }
  async getExaminersUsingMobile(mobile) {
    return _ExaminerModel.default.find({
      mobile
    });
  }
  async getAllExaminers() {
    return _ExaminerModel.default.find();
  }

  // Super Admin
  async addAdmin(user) {
    const email = user.email;
    const user_Exist = await _AdminModel.default.findOne({
      email
    });
    if (user_Exist) {
      return {
        status: 400,
        message: "Admin already exists"
      };
    }
    const admin = await _AdminModel.default.create({
      email: user.email,
      password: user.password,
      role: user.role,
      passwordLength: user.password.length
    });
    return {
      status: 200,
      message: "Admin added successfully"
    };
  }
  async updateAdmin(user) {
    const email = user.email;
    console.log(user);
    const admin = await _AdminModel.default.findOne({
      email
    });
    if (!admin) {
      return {
        status: 400,
        message: "Admin not found"
      };
    }
    const updatedAdmin = await _AdminModel.default.findByIdAndUpdate(admin._id, {
      password: user.password,
      passwordLength: user.password.length,
      role: user.role
    });
    return updatedAdmin;
  }
  async getAdmins() {
    const admins = await _AdminModel.default.find();
    admins.forEach((admin, index) => {
      if (admin.email === "developer@ppsu.db") {
        admins.splice(index, 1);
      }
    });
    return admins;
  }
  async getPassword(email) {
    const admin = await _AdminModel.default.findOne({
      email
    });
    if (!admin) {
      return {
        status: 400,
        message: "Admin not found"
      };
    }
    return admin.password;
  }
  async updateExaminer(user) {
    console.log(user);
    return _ExaminerModel.default.findByIdAndUpdate(user.id, user);
  }
  async addMultipleUsers(users) {
    const response = [];
    users.forEach(async user => {
      const resposne = await this.addExaminer(user);
      response.push(resposne);
    });
    return response;
  }
  async addUniversity(university) {
    return _UniversityModel.default.create(university);
  }
  async getUniversities() {
    return _UniversityModel.default.find();
  }
  async updateUniversity(university) {
    return _UniversityModel.default.findByIdAndUpdate(university._id, university);
  }
  async getDistance(name) {
    return _UniversityModel.default.findOne({
      name
    });
  }
  async getMetaData() {
    return _MetaDeta.default.findOne({
      unique: "metaData"
    });
  }
  async assign(data) {
    return _AssignModel.default.create(data);
  }
  async getAssignments() {
    return _AssignModel.default.find();
  }
  async updateAssignment(data) {
    return _AssignModel.default.findByIdAndUpdate(data.id, data);
  }
  async deleteAssignment(id) {
    return _AssignModel.default.findByIdAndDelete(id);
  }
}
var _default = exports.default = new AdminService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,