"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Controller = void 0;

var _admin = _interopRequireDefault(require("../../services/admin.service"));

var _authentication = _interopRequireDefault(require("../../services/authentication.service"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Controller {
  async signIn(req, res) {
    const {
      email,
      password
    } = req.body;
    const user = await _admin.default.signIn(email, password);
    res.status(200).send(user);
  }

  async addExaminer(req, res) {
    const user = await _admin.default.addExaminer(req.body.user);
    res.status(200).send(user);
  }

  async getExaminers(req, res) {
    const {
      limit
    } = req.query;
    if (!limit) limit = 10;
    const users = await _admin.default.getExaminers(limit);
    res.status(200).send(users);
  }

  async getExaminersUsingId(req, res) {
    const {
      id
    } = req.params;
    const user = await _admin.default.getExaminersUsingId(id);
    res.status(200).send(user);
  }

  async getAllExaminers(req, res) {
    const token = req.headers.authorization.split(" ")[1];

    try {
      const decoded = await _authentication.default.verifyToken(token);
      console.log(decoded);

      if (decoded) {
        const users = await _admin.default.getAllExaminers();
        res.status(200).send(users);
      }
    } catch (err) {
      res.status(401).send("Unauthorized");
    }
  }

  async addAdmin(req, res) {
    const user = await _admin.default.addAdmin(req.body);
    res.status(200).send(user);
  }

  async updateExaminer(req, res) {
    const user = await _admin.default.updateExaminer(req.body.user);
    res.status(200).send(user);
  }

  async updateAdmin(req, res) {
    const user = await _admin.default.updateAdmin(req.body);
    res.status(200).send(user);
  }

  async getAdmins(req, res) {
    const admins = await _admin.default.getAdmins();
    res.status(200).send(admins);
  }

  async getPassword(req, res) {
    const {
      email
    } = req.body;
    const password = await _admin.default.getPassword(email);
    res.status(200).send(password);
  }

  async verifyToken(req, res) {
    const {
      token
    } = req.body;
    const decoded = await _authentication.default.verifyToken(token);

    if (decoded) {
      res.status(200).send(decoded);
    } else {
      res.status(401).send("Unauthorized");
    }
  }

  async addMultipleUsers(req, res) {
    const users = await _admin.default.addMultipleUsers(req.body.users);
    res.status(200).send(users);
  } // async getUniversity(req, res) {
  //   const { name } = req.body;
  //   const university = await AdminService.getUniversity(name);
  //   res.status(200).send(university);
  // }


  async addUniversity(req, res) {
    const university = await _admin.default.addUniversity(req.body);
    res.status(200).send(university);
  }

  async getUniversities(req, res) {
    const universities = await _admin.default.getUniversities();
    res.status(200).send(universities);
  }

  async updateUniversity(req, res) {
    const university = await _admin.default.updateUniversity(req.body);
    res.status(200).send(university);
  }

}

exports.Controller = Controller;

var _default = new Controller();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,