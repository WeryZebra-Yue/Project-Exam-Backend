"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Controller = void 0;

var _admin = _interopRequireDefault(require("../../services/admin.service"));

var _authentication = _interopRequireDefault(require("../../services/authentication.service"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Controller {
  async signIn(req, res) {
    const {
      email,
      password
    } = req.body;
    const user = await _admin.default.signIn(email, password);
    res.status(200).send(user);
  }

  async addExaminer(req, res) {
    const user = await _admin.default.addExaminer(req.body.user);
    res.status(200).send(user);
  }

  async getExaminers(req, res) {
    const {
      limit
    } = req.query;
    if (!limit) limit = 10;
    const users = await _admin.default.getExaminers(limit);
    res.status(200).send(users);
  }

  async getExaminersUsingId(req, res) {
    const {
      id
    } = req.params;
    const user = await _admin.default.getExaminersUsingId(id);
    res.status(200).send(user);
  }

  async getAllExaminers(req, res) {
    const token = req.headers.authorization.split(" ")[1];

    try {
      const decoded = await _authentication.default.verifyToken(token);
      console.log(decoded);

      if (decoded) {
        const users = await _admin.default.getAllExaminers();
        res.status(200).send(users);
      }
    } catch (err) {
      res.status(401).send("Unauthorized");
    }
  }

  async addAdmin(req, res) {
    const user = await _admin.default.addAdmin(req.body);
    res.status(200).send(user);
  }

  async updateExaminer(req, res) {
    const user = await _admin.default.updateExaminer(req.body.user);
    res.status(200).send(user);
  }

  async updateAdmin(req, res) {
    const user = await _admin.default.updateAdmin(req.body);
    res.status(200).send(user);
  }

  async getAdmins(req, res) {
    const admins = await _admin.default.getAdmins();
    res.status(200).send(admins);
  }

  async getPassword(req, res) {
    const {
      email
    } = req.body;
    const password = await _admin.default.getPassword(email);
    res.status(200).send(password);
  }

  async verifyToken(req, res) {
    const {
      token
    } = req.body;
    const decoded = await _authentication.default.verifyToken(token);

    if (decoded) {
      res.status(200).send(decoded);
    } else {
      res.status(401).send("Unauthorized");
    }
  }

}

exports.Controller = Controller;

var _default = new Controller();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb250cm9sbGVyIiwic2lnbkluIiwicmVxIiwicmVzIiwiZW1haWwiLCJwYXNzd29yZCIsImJvZHkiLCJ1c2VyIiwiQWRtaW5TZXJ2aWNlIiwic3RhdHVzIiwic2VuZCIsImFkZEV4YW1pbmVyIiwiZ2V0RXhhbWluZXJzIiwibGltaXQiLCJxdWVyeSIsInVzZXJzIiwiZ2V0RXhhbWluZXJzVXNpbmdJZCIsImlkIiwicGFyYW1zIiwiZ2V0QWxsRXhhbWluZXJzIiwidG9rZW4iLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsInNwbGl0IiwiZGVjb2RlZCIsImF1dGhlbnRpY2F0aW9uU2VydmljZSIsInZlcmlmeVRva2VuIiwiY29uc29sZSIsImxvZyIsImVyciIsImFkZEFkbWluIiwidXBkYXRlRXhhbWluZXIiLCJ1cGRhdGVBZG1pbiIsImdldEFkbWlucyIsImFkbWlucyIsImdldFBhc3N3b3JkIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc2VydmVyL2FwaS9jb250cm9sbGVycy9hZG1pbi9jb250cm9sbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBZG1pblNlcnZpY2UgZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2FkbWluLnNlcnZpY2VcIjtcclxuaW1wb3J0IGF1dGhlbnRpY2F0aW9uU2VydmljZSBmcm9tIFwiLi4vLi4vc2VydmljZXMvYXV0aGVudGljYXRpb24uc2VydmljZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRyb2xsZXIge1xyXG4gIGFzeW5jIHNpZ25JbihyZXEsIHJlcykge1xyXG4gICAgY29uc3QgeyBlbWFpbCwgcGFzc3dvcmQgfSA9IHJlcS5ib2R5O1xyXG5cclxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBBZG1pblNlcnZpY2Uuc2lnbkluKGVtYWlsLCBwYXNzd29yZCk7XHJcbiAgICByZXMuc3RhdHVzKDIwMCkuc2VuZCh1c2VyKTtcclxuICB9XHJcbiAgYXN5bmMgYWRkRXhhbWluZXIocmVxLCByZXMpIHtcclxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBBZG1pblNlcnZpY2UuYWRkRXhhbWluZXIocmVxLmJvZHkudXNlcik7XHJcbiAgICByZXMuc3RhdHVzKDIwMCkuc2VuZCh1c2VyKTtcclxuICB9XHJcbiAgYXN5bmMgZ2V0RXhhbWluZXJzKHJlcSwgcmVzKSB7XHJcbiAgICBjb25zdCB7IGxpbWl0IH0gPSByZXEucXVlcnk7XHJcbiAgICBpZiAoIWxpbWl0KSBsaW1pdCA9IDEwO1xyXG4gICAgY29uc3QgdXNlcnMgPSBhd2FpdCBBZG1pblNlcnZpY2UuZ2V0RXhhbWluZXJzKGxpbWl0KTtcclxuICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHVzZXJzKTtcclxuICB9XHJcbiAgYXN5bmMgZ2V0RXhhbWluZXJzVXNpbmdJZChyZXEsIHJlcykge1xyXG4gICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcclxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBBZG1pblNlcnZpY2UuZ2V0RXhhbWluZXJzVXNpbmdJZChpZCk7XHJcbiAgICByZXMuc3RhdHVzKDIwMCkuc2VuZCh1c2VyKTtcclxuICB9XHJcbiAgYXN5bmMgZ2V0QWxsRXhhbWluZXJzKHJlcSwgcmVzKSB7XHJcbiAgICBjb25zdCB0b2tlbiA9IHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24uc3BsaXQoXCIgXCIpWzFdO1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgZGVjb2RlZCA9IGF3YWl0IGF1dGhlbnRpY2F0aW9uU2VydmljZS52ZXJpZnlUb2tlbih0b2tlbik7XHJcbiAgICAgIGNvbnNvbGUubG9nKGRlY29kZWQpO1xyXG4gICAgICBpZiAoZGVjb2RlZCkge1xyXG4gICAgICAgIGNvbnN0IHVzZXJzID0gYXdhaXQgQWRtaW5TZXJ2aWNlLmdldEFsbEV4YW1pbmVycygpO1xyXG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHVzZXJzKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIHJlcy5zdGF0dXMoNDAxKS5zZW5kKFwiVW5hdXRob3JpemVkXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuICBhc3luYyBhZGRBZG1pbihyZXEsIHJlcykge1xyXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IEFkbWluU2VydmljZS5hZGRBZG1pbihyZXEuYm9keSk7XHJcbiAgICByZXMuc3RhdHVzKDIwMCkuc2VuZCh1c2VyKTtcclxuICB9XHJcbiAgYXN5bmMgdXBkYXRlRXhhbWluZXIocmVxLCByZXMpIHtcclxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBBZG1pblNlcnZpY2UudXBkYXRlRXhhbWluZXIocmVxLmJvZHkudXNlcik7XHJcbiAgICByZXMuc3RhdHVzKDIwMCkuc2VuZCh1c2VyKTtcclxuICB9XHJcbiAgYXN5bmMgdXBkYXRlQWRtaW4ocmVxLCByZXMpIHtcclxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBBZG1pblNlcnZpY2UudXBkYXRlQWRtaW4ocmVxLmJvZHkpO1xyXG4gICAgcmVzLnN0YXR1cygyMDApLnNlbmQodXNlcik7XHJcbiAgfVxyXG4gIGFzeW5jIGdldEFkbWlucyhyZXEsIHJlcykge1xyXG4gICAgY29uc3QgYWRtaW5zID0gYXdhaXQgQWRtaW5TZXJ2aWNlLmdldEFkbWlucygpO1xyXG4gICAgcmVzLnN0YXR1cygyMDApLnNlbmQoYWRtaW5zKTtcclxuICB9XHJcbiAgYXN5bmMgZ2V0UGFzc3dvcmQocmVxLCByZXMpIHtcclxuICAgIGNvbnN0IHsgZW1haWwgfSA9IHJlcS5ib2R5O1xyXG4gICAgY29uc3QgcGFzc3dvcmQgPSBhd2FpdCBBZG1pblNlcnZpY2UuZ2V0UGFzc3dvcmQoZW1haWwpO1xyXG4gICAgcmVzLnN0YXR1cygyMDApLnNlbmQocGFzc3dvcmQpO1xyXG4gIH1cclxuICBhc3luYyB2ZXJpZnlUb2tlbihyZXEsIHJlcykge1xyXG4gICAgY29uc3QgeyB0b2tlbiB9ID0gcmVxLmJvZHk7XHJcbiAgICBjb25zdCBkZWNvZGVkID0gYXdhaXQgYXV0aGVudGljYXRpb25TZXJ2aWNlLnZlcmlmeVRva2VuKHRva2VuKTtcclxuICAgIGlmIChkZWNvZGVkKSB7XHJcbiAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKGRlY29kZWQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVzLnN0YXR1cyg0MDEpLnNlbmQoXCJVbmF1dGhvcml6ZWRcIik7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBDb250cm9sbGVyKCk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRU8sTUFBTUEsVUFBTixDQUFpQjtFQUNWLE1BQU5DLE1BQU0sQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQVc7SUFDckIsTUFBTTtNQUFFQyxLQUFGO01BQVNDO0lBQVQsSUFBc0JILEdBQUcsQ0FBQ0ksSUFBaEM7SUFFQSxNQUFNQyxJQUFJLEdBQUcsTUFBTUMsY0FBQSxDQUFhUCxNQUFiLENBQW9CRyxLQUFwQixFQUEyQkMsUUFBM0IsQ0FBbkI7SUFDQUYsR0FBRyxDQUFDTSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUJILElBQXJCO0VBQ0Q7O0VBQ2dCLE1BQVhJLFdBQVcsQ0FBQ1QsR0FBRCxFQUFNQyxHQUFOLEVBQVc7SUFDMUIsTUFBTUksSUFBSSxHQUFHLE1BQU1DLGNBQUEsQ0FBYUcsV0FBYixDQUF5QlQsR0FBRyxDQUFDSSxJQUFKLENBQVNDLElBQWxDLENBQW5CO0lBQ0FKLEdBQUcsQ0FBQ00sTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCSCxJQUFyQjtFQUNEOztFQUNpQixNQUFaSyxZQUFZLENBQUNWLEdBQUQsRUFBTUMsR0FBTixFQUFXO0lBQzNCLE1BQU07TUFBRVU7SUFBRixJQUFZWCxHQUFHLENBQUNZLEtBQXRCO0lBQ0EsSUFBSSxDQUFDRCxLQUFMLEVBQVlBLEtBQUssR0FBRyxFQUFSO0lBQ1osTUFBTUUsS0FBSyxHQUFHLE1BQU1QLGNBQUEsQ0FBYUksWUFBYixDQUEwQkMsS0FBMUIsQ0FBcEI7SUFDQVYsR0FBRyxDQUFD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