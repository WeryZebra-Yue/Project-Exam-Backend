"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = swagger;
var _swaggerExpressMiddleware = _interopRequireDefault(require("swagger-express-middleware"));
var path = _interopRequireWildcard(require("path"));
var _error = _interopRequireDefault(require("../api/middlewares/error.handler"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function swagger(app, routes) {
  return new Promise((resolve, reject) => {
    (0, _swaggerExpressMiddleware.default)(path.join(__dirname, 'api.yml'), app, (err, mw) => {
      if (err) {
        return reject(err);
      }
      // Enable Express' case-sensitive and strict options
      // (so "/entities", "/Entities", and "/Entities/" are all different)
      app.enable('case sensitive routing');
      app.enable('strict routing');
      app.use(mw.metadata());
      app.use(mw.files({
        // Override the Express App's case-sensitive 
        // and strict-routing settings for the Files middleware.
        caseSensitive: false,
        strict: false
      }, {
        useBasePath: false,
        apiPath: process.env.SWAGGER_API_SPEC
        // Disable serving the "api.yml" file
        // rawFilesPath: false
      }));

      app.use(mw.parseRequest({
        // Configure the cookie parser to use secure cookies
        cookie: {
          secret: process.env.SESSION_SECRET
        },
        // Don't allow JSON content over 100kb (default is 1mb)
        json: {
          limit: process.env.REQUEST_LIMIT
        }
      }));

      // These two middleware don't have any options (yet)
      app.use(mw.CORS(), mw.validateRequest());
      routes(app);

      // eslint-disable-next-line no-unused-vars, no-shadow
      app.use(_error.default);
      return resolve();
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3dhZ2dlckV4cHJlc3NNaWRkbGV3YXJlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJwYXRoIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfZXJyb3IiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJvYmoiLCJzd2FnZ2VyIiwiYXBwIiwicm91dGVzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJtaWRkbGV3YXJlIiwiam9pbiIsIl9fZGlybmFtZSIsImVyciIsIm13IiwiZW5hYmxlIiwidXNlIiwibWV0YWRhdGEiLCJmaWxlcyIsImNhc2VTZW5zaXRpdmUiLCJzdHJpY3QiLCJ1c2VCYXNlUGF0aCIsImFwaVBhdGgiLCJwcm9jZXNzIiwiZW52IiwiU1dBR0dFUl9BUElfU1BFQyIsInBhcnNlUmVxdWVzdCIsImNvb2tpZSIsInNlY3JldCIsIlNFU1NJT05fU0VDUkVUIiwianNvbiIsImxpbWl0IiwiUkVRVUVTVF9MSU1JVCIsIkNPUlMiLCJ2YWxpZGF0ZVJlcXVlc3QiLCJlcnJvckhhbmRsZXIiXSwic291cmNlcyI6WyIuLi8uLi9zZXJ2ZXIvY29tbW9uL3N3YWdnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1pZGRsZXdhcmUgZnJvbSAnc3dhZ2dlci1leHByZXNzLW1pZGRsZXdhcmUnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBlcnJvckhhbmRsZXIgZnJvbSAnLi4vYXBpL21pZGRsZXdhcmVzL2Vycm9yLmhhbmRsZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzd2FnZ2VyKGFwcCwgcm91dGVzKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgbWlkZGxld2FyZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnYXBpLnltbCcpLCBhcHAsIChlcnIsIG13KSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICAgIC8vIEVuYWJsZSBFeHByZXNzJyBjYXNlLXNlbnNpdGl2ZSBhbmQgc3RyaWN0IG9wdGlvbnNcbiAgICAgIC8vIChzbyBcIi9lbnRpdGllc1wiLCBcIi9FbnRpdGllc1wiLCBhbmQgXCIvRW50aXRpZXMvXCIgYXJlIGFsbCBkaWZmZXJlbnQpXG4gICAgICBhcHAuZW5hYmxlKCdjYXNlIHNlbnNpdGl2ZSByb3V0aW5nJyk7XG4gICAgICBhcHAuZW5hYmxlKCdzdHJpY3Qgcm91dGluZycpO1xuXG4gICAgICBhcHAudXNlKG13Lm1ldGFkYXRhKCkpO1xuICAgICAgYXBwLnVzZShtdy5maWxlcyh7XG4gICAgICAgIC8vIE92ZXJyaWRlIHRoZSBFeHByZXNzIEFwcCdzIGNhc2Utc2Vuc2l0aXZlIFxuICAgICAgICAvLyBhbmQgc3RyaWN0LXJvdXRpbmcgc2V0dGluZ3MgZm9yIHRoZSBGaWxlcyBtaWRkbGV3YXJlLlxuICAgICAgICBjYXNlU2Vuc2l0aXZlOiBmYWxzZSxcbiAgICAgICAgc3RyaWN0OiBmYWxzZSxcbiAgICAgIH0sIHtcbiAgICAgICAgdXNlQmFzZVBhdGg6IGZhbHNlLFxuICAgICAgICBhcGlQYXRoOiBwcm9jZXNzLmVudi5TV0FHR0VSX0FQSV9TUEVDLFxuICAgICAgICAvLyBEaXNhYmxlIHNlcnZpbmcgdGhlIFwiYXBpLnltbFwiIGZpbGVcbiAgICAgICAgLy8gcmF3RmlsZXNQYXRoOiBmYWxzZVxuICAgICAgfSkpO1xuXG4gICAgICBhcHAudXNlKG13LnBhcnNlUmVxdWVzdCh7XG4gICAgICAgIC8vIENvbmZpZ3VyZSB0aGUgY29va2llIHBhcnNlciB0byB1c2Ugc2VjdXJlIGNvb2tpZXNcbiAgICAgICAgY29va2llOiB7XG4gICAgICAgICAgc2VjcmV0OiBwcm9jZXNzLmVudi5TRVNTSU9OX1NFQ1JFVCxcbiAgICAgICAgfSxcbiAgICAgICAgLy8gRG9uJ3QgYWxsb3cgSlNPTiBjb250ZW50IG92ZXIgMTAwa2IgKGRlZmF1bHQgaXMgMW1iKVxuICAgICAgICBqc29uOiB7XG4gICAgICAgICAgbGltaXQ6IHByb2Nlc3MuZW52LlJFUVVFU1RfTElNSVQsXG4gICAgICAgIH0sXG4gICAgICB9KSk7XG5cbiAgICAgIC8vIFRoZXNlIHR3byBtaWRkbGV3YXJlIGRvbid0IGhhdmUgYW55IG9wdGlvbnMgKHlldClcbiAgICAgIGFwcC51c2UoXG4gICAgICAgIG13LkNPUlMoKSxcbiAgICAgICAgbXcudmFsaWRhdGVSZXF1ZXN0KCkpO1xuXG4gICAgICByb3V0ZXMoYXBwKTtcblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzLCBuby1zaGFkb3dcbiAgICAgIGFwcC51c2UoZXJyb3JIYW5kbGVyKTtcbiAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgfSk7XG4gIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSx5QkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsSUFBQSxHQUFBQyx1QkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsTUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQTRELFNBQUFJLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLENBQUFDLENBQUEsV0FBQUEsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsS0FBQUYsQ0FBQTtBQUFBLFNBQUFILHdCQUFBRyxDQUFBLEVBQUFFLENBQUEsU0FBQUEsQ0FB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